<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>OOP Library</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">

    <!-- Le styles -->
    <link href="../bootstrap/css/bootstrap.css" rel="stylesheet">
    <style type="text/css">
      body {
        padding-top: 60px;
        padding-bottom: 40px;
      }
      .sidebar-nav {
        padding: 9px 0;
      }

      @media (max-width: 980px) {
        /* Enable use of floated navbar text */
        .navbar-text.pull-right {
          float: none;
          padding-left: 5px;
          padding-right: 5px;
        }
      }
    </style>
    <link href="../bootstrap/css/bootstrap-responsive.css" rel="stylesheet">

    <!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="../bootstrap/js/html5shiv.js"></script>
    <![endif]-->

    <!-- Fav and touch icons -->
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="../bootstrap/ico/apple-touch-icon-144-precomposed.png">
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="../bootstrap/ico/apple-touch-icon-114-precomposed.png">
      <link rel="apple-touch-icon-precomposed" sizes="72x72" href="../bootstrap/ico/apple-touch-icon-72-precomposed.png">
                    <link rel="apple-touch-icon-precomposed" href="../bootstrap/ico/apple-touch-icon-57-precomposed.png">
                                   <link rel="shortcut icon" href="../bootstrap/ico/favicon.png">
  </head>

  <body>

    <div class="navbar navbar-inverse navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container-fluid">
          <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="brand" href="#">MOLLY Framework </a>
          <div class="nav-collapse collapse">
            <p class="navbar-text pull-right">
              Logged in as <a href="#" class="navbar-link">Steve</a>
            </p>
            <ul class="nav">
              <li class="active"><a href="#">Home</a></li>
              <li><a href="#about">About</a></li>
              <li><a href="#contact">Contact</a></li>
            </ul>
          </div><!--/.nav-collapse -->
        </div>
      </div>
    </div>

    <div class="container-fluid">
      <div class="row-fluid">
        <div class="span3">
          <div class="well sidebar-nav">
            <ul class="nav nav-list">

              <li class="nav-header">Sidebar</li>
              <li class="active"><a href="#create">Create</a></li>
              <li><a href="#extends">Extends</a></li>
              <li><a href="#interface">Interface</a></li>
              <li><a href="#algorithm">Algorithm</a></li>		
            </ul>
          </div><!--/.well -->
        </div><!--/span-->
        <div class="span9">
          <div class="hero-unit">

           <h1>API</h1>
           		<div class="row-fluid">
  					<div class="span1"><b>Provides:</b></div>
  					<div class="span11"><br/>
<pre style="color: #006600;">
[Create, Extends, ProtectedPropertype, PrivatePropertype, FunctionPattern, AccessDeniedError, Check,Object.addProperty]
</pre>
					</div>
				</div>
           		<div class="row-fluid">
  					<div class="span1"><a id="create"><b>Create:</b></a></div>
  					<div class="span11">
  					<div style = "margin-left:20px;">
  						Create a Object (class) <br/>
           				<i  style="color:#660066;">syntax: Create(object) </i><br/>
           				Example:<br/>
<pre style="color: #006600;">
var PERSON = Create(function(){	
	this._init = function(firstName, lastName){
		this.firstName = new ProtectedProperty(firstName);
		this.lastName  = new ProtectedProperty(lastName);
	};
	this.information = function(){
		console.log('my name is ' + this.firstName + " " + this.lastName);
	};
})
// Create Object
var m = new PERSON('Steve', "Hoang");
</pre>
					Note:<br/>
					<pre style="color: #000066;"> <b>ProtectedProperty </b>: To create a field that can be accessed by only members of the same class,</pre>
					<pre style="color: #000066;"> <b>PrivateProperty </b>: To create a field that can be accessed by members of the same class and members of other classes,</pre>
					<pre style="color: #000066;"> <b>_init </b>: When you create a new instance (a new object) of a class using the new keyword, a constructor for that class is called. Constructors are used to initialize the instance variables (fields) of an object.</pre>
					<pre style="color: #000066;"> <b>_create </b>: run after _init, very useful when you want to do some thing with ProtectedProperty, PrivateProperty (because in _init function, it not created yet)</pre>
					<pre style="color: #660000;">( <b>Public Property </b>

//add public property
m.getFirstName = function(){
	return this.firstName;
}

)</pre>
<pre style="color: #660000;">( <b>Không nên sử dụng khai báo như sau: </b>

var PERSON = Create(function(){
	this.firstName = new ProtectedProperty('');
	this.lastName  = new ProtectedProperty('');
	this._init = function(firstName, lastName){
		this.firstName = firstName;
		this.lastName  = lastName;
	};
	this.information = function(){
		console.log('my name is ' + this.firstName + " " + this.lastName);
	};
})

instead use

var PERSON = Create(function(){	
	this._init = function(firstName, lastName){
		this.firstName = new ProtectedProperty(firstName);
		this.lastName  = new ProtectedProperty(lastName);
	};
	this.information = function(){
		console.log('my name is ' + this.firstName + " " + this.lastName);
	};
})

Bởi vì theo cớ chế sử lý function scope (firstName, lastName) được nằm ở lớp parent (__proto__) nhưng với khai báo ở dưới, nó được đặt nằm ngay trong object mới mà bạn tạo ra.
=>
<b> should create new properties in _init function </b>
)</pre>
           			</div>
           			</div>	
				</div>
           		
           		<div class="row-fluid">
  					<div class="span1"><a id="extends"><b>Extends:</b></a></div>
  					<div class="span11">
  					<div style = "margin-left:20px;">
  						Extend a Object (class) <br/>
           				<i  style="color:#660066;">syntax: Extends(parent, object) </i><br/>
           				Example:<br/>
<pre style="color: #006600;">var AUS = Extends(PERSON, function(){
	
	this._init = function(firstName, lastName, sex){
		this._super(firstName, lastName);
		this.sex = new PrivateProperty(sex);
	};
	this.information2 = function(){
		this._super();
		console.log('i am ' + this.sex);
	};
})
</pre>
           			</div>
           			</div>
				</div>

				<div class="row-fluid">
  					<div class="span1"><a id="interface"><b>Interface:</b></a></div>
  					<div class="span11">
  					<div style = "margin-left:20px;">
  						Create a Interface <br/>
           				<i  style="color:#660066;">syntax: Interface(Object, [method01, method02]) </i><br/>
           				Example:<br/>
<pre style="color: #006600;">var inf = new Interface('inf',['i1', 'i2', 'i3']);
var obj = {
	i1: function(){},
	i2: function(){},
	i3: function(){}
}
console.log(inf);
console.log(Interface.ensureImplements(obj, inf)); 
</pre>
					Note:<br/>
					<pre style="color: #000066;"> <b>Interface.ensureImplements(obj, inf) </b>: throw new Error if obj does not implement all method in inf</pre>

           			</div>
           			</div>

				</div>
				<div class="row-fluid">
  					<div class="span1"><a id="algorithm"><b>Algorithm:</b></a></div>
  					<div class="span11">
  					<div style = "margin-left:20px;">
  							Protected Property : 
<pre style="color: #000066;">
	+ Sử dụng method <i style="color:red;">Object.defineProperty</i> để add;
	+ Khi tao 1 Protected Property ta set 2 giá trị <i style="color:red;">value (1 local variable)</i> và <i style="color:red;">object(đối tượng chứa Protected Property)</i>
	+ Định nghĩa 2 method get và set cho việc truy cập, khi truy cập ta sử  dụng Function <i style="color:red;">Check</i> để kiểm tra.Nếu phương thức gọi truy cập là từ object phía trên thì return value, ngược lại thì throw AccessDeniedError.
</pre>						_super : 
<pre style="color: #000066;">
	+ Khi 1 method có mặt ở cả 2 Object là <i style="color:red;">Parent</i> và <i style="color:red;">object</i> thì ta tạo 1 phương thực mới;Lưu phương thức cũ ở  Parent thành _super và gọi sử lý (targeFunc.apply(this, arguments);).
</pre>	
							some trick : 
<pre style="color: #000066;">
this.get = function get(){
	Check(ObjectParent, get.caller);
	return value;
};
Định nghĩa method get bằng 1 function định danh, như vậy có thể sử dụng get.caller nhưng chú ý là sử  dụng <b>this</b> sẽ là get() chứ không phải đối tượng đó.
</pre>	
  					</div>
           			</div>

				</div>
				
          </div>
                    
        </div><!--/span-->
      </div><!--/row-->

      <hr>

      <footer>
        <p> Particles 4 Dev </p>
      </footer>

    </div><!--/.fluid-container-->

    <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    
  </body>
</html>
